#!/usr/bin/env python

'''
Parse the PitchFX data and store in a database.

Usage:
    python parse-xml.py -o path/to/data/ -d 'sqlite:///file.db' [-s <start day>] [-e <end day>]

The database path given can be whatever sqlalchemy supports. For instance, postgres:///pitchfx if the username and password are not necessary when connecting to the PostgreSQL database 'pitchfx'.
'''

import sys
try:
    import preamble
except ImportError:
    sys.exc_clear()

from sqlalchemy.sql import select
import mlb.mlbam.gameday as gameday
import argparse

def load_players():
    player_table = gd.meta.tables['mlbam_player']
    select_ids = select([player_table.c.mlbamid], player_table.c.mlbamid != None)
    for row in gd.conn.execute(select_ids):
        mlbamids.add(row['mlbamid'])


def parse_day(output_dir, day):
    datematch = day.strftime("gid_%Y_%m_%d*")
    games = fnmatch.filter(os.listdir(output_dir), datematch)
    for game in games:
        parse_game(os.path.join(output_dir, game), day)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Parse MLB Gameday data.')
    parser.add_argument('-o', '--output_dir', metavar='DIR', help='Output directory')
    parser.add_argument('-s', '--start', metavar='DATE', help='Start day')
    parser.add_argument('-e', '--end', metavar='DATE', help='End day')
    parser.add_argument('-l', '--leagues', action='append', help='Parse these leagues')
    args = parser.parse_args()
    gameday_fetch = FetchMLBAM(**args.__dict__)
    gameday_fetch.fetch()

    for day in gd.each_day():
        parse_day(gd.output_dir, day)
